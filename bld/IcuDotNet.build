<project name="ICU dotNet" default="build">

	<property name="configuration" value="release" />

	<target name="build" depends="assemblyinfo, test" />

	<target name="clean" description="Delete all previously compiled binaries.">
		<delete>
			<fileset>
				<include name="../**/bin/**" />
				<include name="../**/obj/**" />
				<include name="../output/**" />
				<include name="../Release/output/*" />
			</fileset>
		</delete>
	</target>

	<target name="build.only" depends="clean" description="Builds the solution.">
		<solution configuration="${configuration}" solutionfile="../source/icu.net.sln" />
	</target>

	<target name="test" depends="build.only" description="Tests the build.">
		<nunit2>
			<formatter type="Plain" usefile="true" />
			<test>
				<assemblies>
					<include name="../source/icu.net.tests/bin/${configuration}/*.tests.dll" />
				</assemblies>
				<categories>
					<exclude name="Full ICU"/>
				</categories>
			</test>
		</nunit2>
	</target>

	<target name="revision">
		<property name="svn.info.log" value="svninfo.txt"/>
		<exec
			program="svn.exe"
			basedir="C:\Program Files\Subversion\bin"
			commandline="info http://icu-dotnet.googlecode.com/svn/trunk/"
			output="${svn.info.log}"
		/>
		<loadfile property="svn.head.revision" file="${svn.info.log}" />
		<regex pattern="^Revision: (?'revision'.*)$" input="${svn.head.revision}" options="Multiline" />
		<property name="revision" value="${string::trim(revision)}" />
		<echo message="Revision: ${revision}" />
		<delete file="${svn.info.log}" />
	</target>

	<target name="version" depends="revision">
		<loadfile property="version" file="version.txt">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<property name="version" value="${string::trim(version)}" />
		<echo message="Version: ${version}" />
	</target>

	<target name="assemblyinfo" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../**/AssemblyInfo.cs" />
				</items>
			</in>
			<do>
				<script language="C#">
				<code><![CDATA[
				public static void ScriptMain(Project project)
				{
					StreamReader reader = new StreamReader(project.Properties["filename"]);
					string contents = reader.ReadToEnd();
					reader.Close();
					string replacement;
					string newText = contents;
					replacement = string.Format(
						"[assembly: AssemblyVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyVersion\("".*""\)\]", replacement);
					replacement = string.Format(
						"[assembly: AssemblyFileVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyFileVersion\("".*""\)\]", replacement);
					StreamWriter writer = new StreamWriter(project.Properties["filename"], false);
					writer.Write(newText);
					writer.Close();
				}
				]]>
				</code>
				</script>
			</do>
		</foreach>
	</target>

</project>
